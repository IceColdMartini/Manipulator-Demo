version: '3.8'

services:
  # Redis service for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: manipulator-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - manipulator-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: manipulator-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-manipulator_ai}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - manipulator-network

  # MongoDB for conversation storage
  mongodb:
    image: mongo:7
    container_name: manipulator-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-secure_password}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-manipulator_conversations}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - manipulator-network

  # Main FastAPI application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-latest}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
    container_name: manipulator-app
    restart: unless-stopped
    environment:
      # Database connections
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-manipulator_ai}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      MONGO_DB: ${MONGO_DB:-manipulator_conversations}
      MONGO_USER: ${MONGO_ROOT_USER:-admin}
      MONGO_PASSWORD: ${MONGO_ROOT_PASSWORD:-secure_password}
      
      # Redis connection
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      
      # API configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      DEBUG: ${DEBUG:-false}
      
      # Celery configuration
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      
      # Application settings
      APP_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - manipulator-network

  # Celery worker for async task processing
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: manipulator-celery-worker
    restart: unless-stopped
    environment:
      # Database connections (same as app)
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-manipulator_ai}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      MONGO_DB: ${MONGO_DB:-manipulator_conversations}
      MONGO_USER: ${MONGO_ROOT_USER:-admin}
      MONGO_PASSWORD: ${MONGO_ROOT_PASSWORD:-secure_password}
      
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      
      # API keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Celery configuration
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      
      # Worker settings
      CELERY_WORKER_CONCURRENCY: ${CELERY_WORKER_CONCURRENCY:-4}
      CELERY_WORKER_MAX_TASKS_PER_CHILD: 1000
    command: ["celery", "-A", "app.core.celery_app:celery_app", "worker", "--loglevel=info", "--queues=conversations,webhooks,analytics"]
    volumes:
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "app.core.celery_app:celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - manipulator-network

  # Celery beat scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: manipulator-celery-beat
    restart: unless-stopped
    environment:
      # Database connections (same as app)
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-manipulator_ai}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      MONGO_DB: ${MONGO_DB:-manipulator_conversations}
      MONGO_USER: ${MONGO_ROOT_USER:-admin}
      MONGO_PASSWORD: ${MONGO_ROOT_PASSWORD:-secure_password}
      
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    command: ["celery", "-A", "app.core.celery_app:celery_app", "beat", "--loglevel=info"]
    volumes:
      - ./logs:/app/logs
      - celery_beat_data:/app/celerybeat-schedule
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - manipulator-network

  # Flower for Celery monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: manipulator-flower
    restart: unless-stopped
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      FLOWER_PORT: 5555
      FLOWER_BASIC_AUTH: ${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-secure_password}
    command: ["celery", "-A", "app.core.celery_app:celery_app", "flower", "--port=5555"]
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - manipulator-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: manipulator-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - manipulator-network
    profiles:
      - nginx  # Optional service, enable with --profile nginx

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  celery_beat_data:
    driver: local

networks:
  manipulator-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
